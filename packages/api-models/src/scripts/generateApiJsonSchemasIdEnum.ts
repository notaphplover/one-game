import fs from 'fs/promises';
import path from 'path';
import { argv } from 'process';

import { readApiJsonSchemas } from '@one-game-js/api-json-schemas-provider';
import { JsonRootSchema202012 } from '@one-game-js/json-schema-utils';
import ts from 'typescript';

const API_SCHEMA_ID_ENUM_NAME: string = 'ApiSchemaId';
const API_SCHEMA_ID_ENUM_SOURCE_FILE_NAME: string = `${API_SCHEMA_ID_ENUM_NAME}.ts`;

function arrayHasThreeElements<T>(value: T[]): value is [T, T, T, ...T[]] {
  const fourElementArrayLength: number = 3;

  return value.length >= fourElementArrayLength;
}

function extractTitleAndId(jsonSchema: JsonRootSchema202012): [string, string] {
  if (typeof jsonSchema === 'boolean') {
    throw new Error('Unexpected boolean JSON schema');
  }

  if (jsonSchema.$id === undefined) {
    throw new Error('Unexpected JSON schema without $id field');
  }

  if (jsonSchema.title === undefined) {
    throw new Error(`Unexpected JSON schema without title field:

${JSON.stringify(jsonSchema)}`);
  }

  return [jsonSchema.$id, jsonSchema.title];
}

function generateApiJsonSchemaIdEnumNode(
  jsonSchemas: JsonRootSchema202012[],
): ts.EnumDeclaration {
  const enumDeclaration: ts.EnumDeclaration = ts.factory.createEnumDeclaration(
    [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)],
    API_SCHEMA_ID_ENUM_NAME,
    jsonSchemas.map(jsonSchemaToApiSchemaIdEnumMember),
  );

  ts.addSyntheticLeadingComment(
    enumDeclaration,
    ts.SyntaxKind.MultiLineCommentTrivia,
    ` eslint-disable `,
    true,
  );

  ts.addSyntheticLeadingComment(
    enumDeclaration,
    ts.SyntaxKind.MultiLineCommentTrivia,
    `
 * This file was automatically generated by the api json schema id enum generation.
 * script. DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema files
 * and run the generation script to regenerate this file.
 `,
    true,
  );

  return enumDeclaration;
}

function generateApiJsonSchemaIdEnumTsSourceContent(
  jsonSchemas: JsonRootSchema202012[],
): string {
  const file: ts.SourceFile = ts.createSourceFile(
    API_SCHEMA_ID_ENUM_SOURCE_FILE_NAME,
    '',
    ts.ScriptTarget.ESNext,
    false,
    ts.ScriptKind.TS,
  );

  const printer: ts.Printer = ts.createPrinter({
    newLine: ts.NewLineKind.LineFeed,
  });

  const enumDeclaration: ts.EnumDeclaration =
    generateApiJsonSchemaIdEnumNode(jsonSchemas);

  const apiJsonSchemaIdEnumTsSource: string = printer.printNode(
    ts.EmitHint.Unspecified,
    enumDeclaration,
    file,
  );

  return apiJsonSchemaIdEnumTsSource;
}

function jsonSchemaToApiSchemaIdEnumMember(
  jsonSchema: JsonRootSchema202012,
): ts.EnumMember {
  const [id, title]: [string, string] = extractTitleAndId(jsonSchema);

  return ts.factory.createEnumMember(
    title,
    ts.factory.createStringLiteral(id, true),
  );
}

void (async () => {
  if (arrayHasThreeElements(argv)) {
    const destinationFolder: string = argv[2];

    const jsonSchemas: JsonRootSchema202012[] = await readApiJsonSchemas();

    const apiJsonSchemaIdEnumTsSource: string =
      generateApiJsonSchemaIdEnumTsSourceContent(jsonSchemas);

    await fs.mkdir(destinationFolder, { recursive: true });

    await fs.writeFile(
      path.join(destinationFolder, API_SCHEMA_ID_ENUM_SOURCE_FILE_NAME),
      apiJsonSchemaIdEnumTsSource,
    );
  } else {
    throw new Error('Invalid args!');
  }
})();
