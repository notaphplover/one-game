import fs from 'node:fs/promises';
import path from 'node:path';
import { argv } from 'node:process';

import * as prettierConfig from '@cornie-js/backend-prettier-config';
import { CodegenConfig, executeCodegen } from '@graphql-codegen/cli';
import { Types } from '@graphql-codegen/plugin-helpers';
import prettier from 'prettier';

const API_SCHEMAS_PACKAGE: string = '@cornie-js/api-graphql-schemas';
const API_SCHEMAS_PACKAGE_SCHEMAS_FOLDER: string = 'schemas';
const GRAPHQL_SCHEMAS_BLOB_SUFFIX: string = '**/*.graphql';

function arrayHasThreeElements<T>(value: T[]): value is [T, T, T, ...T[]] {
  const arrayMinimumLength: number = 3;

  return value.length >= arrayMinimumLength;
}

async function generateAllModels(destinationPath: string): Promise<void> {
  await fs.mkdir(path.dirname(destinationPath), { recursive: true });

  const schemasPackagePath: string = path.dirname(
    require.resolve(path.join(API_SCHEMAS_PACKAGE, 'package.json')),
  );

  const graphqlSchemasBlob: string = path.join(
    schemasPackagePath,
    API_SCHEMAS_PACKAGE_SCHEMAS_FOLDER,
    GRAPHQL_SCHEMAS_BLOB_SUFFIX,
  );

  /*
   * Consider https://the-guild.dev/graphql/codegen/plugins/typescript/typescript as reference
   * Consider https://the-guild.dev/graphql/codegen/plugins/typescript/typescript-resolvers as refrence
   */
  const config: CodegenConfig = {
    generates: {
      [destinationPath]: {
        config: {
          avoidOptionals: true,
          useIndexSignature: true,
        },
        plugins: ['typescript', 'typescript-resolvers'],
      },
    },
    schema: graphqlSchemasBlob,
  };

  const fileOutputs: Types.FileOutput[] = await executeCodegen(config);

  const bannerContent: string = `/* eslint-disable */
/**
 * This file was automatically generated by @graphql-codegen/cli.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source graphql file,
 * and run the generation script to regenerate this file.
 */
`;

  await Promise.all(
    fileOutputs.map(async (fileOutput: Types.FileOutput): Promise<void> => {
      const sourceCode: string = bannerContent + fileOutput.content;
      const formattedSourceCode: string = await prettier.format(sourceCode, {
        ...prettierConfig,
        parser: 'typescript',
      });

      await fs.writeFile(fileOutput.filename, formattedSourceCode);
    }),
  );
}

void (async () => {
  if (arrayHasThreeElements(argv)) {
    const destinationFolder: string = argv[2];

    await generateAllModels(destinationFolder);
  } else {
    throw new Error('Invalid args!');
  }
})();
