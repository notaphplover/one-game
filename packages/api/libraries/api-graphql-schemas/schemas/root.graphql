#import Auth from './auth/Auth.graphql'
#import CodeAuthCreateInput from './auth/CodeAuthCreateInput.graphql'
#import AuthMutation from './auth/AuthMutation.graphql'
#import FindMyGamesInput from './games/FindMyGamesInput.graphql'
#import Game from './games/Game.graphql'
#import GameCreateInput from './games/GameCreateInput.graphql'
#import GameMutation from './games/GameMutation.graphql'
#import GamePassTurnInput from './games/GamePassTurnInput.graphql'
#import GamePlayCardsInput from './games/GamePlayCardsInput.graphql'
#import GameQuery from './games/GameQuery.graphql'
#import UserMutation from './users/UserMutation.graphql'
#import EmailPasswordAuthCreateInput from './auth/EmailPasswordAuthCreateInput.graphql'
#import UserQuery from './users/UserQuery.graphql'
#import User from './users/User.graphql'
#import UserCreateInput from './users/UserCreateInput.graphql'
#import UserUpdateInput from './users/UserUpdateInput.graphql'

type RootMutation implements AuthMutation & GameMutation & UserMutation {
  createAuthByCode(codeAuthCreateInput: CodeAuthCreateInput!): Auth!
  createAuthByCredentials(emailPasswordAuthCreateInput: EmailPasswordAuthCreateInput!): Auth!
  createGame(gameCreateInput: GameCreateInput!): Game!
  createUser(userCreateInput: UserCreateInput!): User!
  passGameTurn(gameId: ID!, gamePassTurnInput: GamePassTurnInput!): Game
  playGameCards(gameId: ID!, gamePlayCardsInput: GamePlayCardsInput!): Game
  updateUserMe(userUpdateInput: UserUpdateInput!): User!
}

type RootQuery implements GameQuery & UserQuery {
  gameById(id: ID!): Game
  myGames(findMyGamesInput: FindMyGamesInput): [Game!]!
  userById(id: ID!): User
  userMe: User!
}

schema {
  mutation: RootMutation
  query: RootQuery
}
