import ts from 'typescript';

import { HttpClientOptions } from '../models/HttpClientOptions';
import { HttpClientClassBuilder } from './HttpClientClassBuilder';

const API_MODELS_MODULE: string = '@cornie-js/api-models';
const API_MODELS_MODULE_MODELS_NAMESPACE: string = 'models';

export class HttpClientSourceFileBuilder {
  public static apiModelsNamespaceIdentifier: string = 'apiModels';
  public static axiosHttpClientClassIdentifier: string = 'AxiosHttpClient';

  readonly #endpointClientClassBuilder: HttpClientClassBuilder;

  constructor(endpointClientClassBuilder: HttpClientClassBuilder) {
    this.#endpointClientClassBuilder = endpointClientClassBuilder;
  }

  public build(options: HttpClientOptions): ts.SourceFile {
    const statements: [ts.Statement, ...ts.Statement[]] =
      this.#buildStatements(options);

    const [firstStatement]: [ts.Statement, ...ts.Statement[]] = statements;

    this.#addLeadingComments(firstStatement);

    return ts.factory.createSourceFile(
      statements,
      ts.factory.createToken(ts.SyntaxKind.EndOfFileToken),
      ts.NodeFlags.None,
    );
  }

  #addLeadingComments(statement: ts.Statement): void {
    ts.addSyntheticLeadingComment(
      statement,
      ts.SyntaxKind.MultiLineCommentTrivia,
      ` eslint-disable `,
      true,
    );

    ts.addSyntheticLeadingComment(
      statement,
      ts.SyntaxKind.MultiLineCommentTrivia,
      `
 * This file was automatically generated by the api http client generation script.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source OpenAPI schema file and run
 * the generation script to regenerate this file.
 `,
      true,
    );
  }

  #buildApiModelsImportDeclaration(): ts.ImportDeclaration {
    return ts.factory.createImportDeclaration(
      undefined,
      ts.factory.createImportClause(
        false,
        undefined,
        ts.factory.createNamedImports([
          ts.factory.createImportSpecifier(
            false,
            ts.factory.createIdentifier(API_MODELS_MODULE_MODELS_NAMESPACE),
            ts.factory.createIdentifier(
              HttpClientSourceFileBuilder.apiModelsNamespaceIdentifier,
            ),
          ),
        ]),
      ),
      ts.factory.createStringLiteral(API_MODELS_MODULE),
    );
  }

  #buildAxiosHttpClientImportDeclaration(): ts.ImportDeclaration {
    return ts.factory.createImportDeclaration(
      undefined,
      ts.factory.createImportClause(
        false,
        undefined,
        ts.factory.createNamedImports([
          ts.factory.createImportSpecifier(
            false,
            undefined,
            ts.factory.createIdentifier('AxiosHttpClient'),
          ),
        ]),
      ),
      ts.factory.createStringLiteral('../axios/AxiosHttpClient'),
      undefined,
    );
  }

  #buildResponseModelImportDeclaration(): ts.ImportDeclaration {
    return ts.factory.createImportDeclaration(
      undefined,
      ts.factory.createImportClause(
        false,
        undefined,
        ts.factory.createNamedImports([
          ts.factory.createImportSpecifier(
            false,
            undefined,
            ts.factory.createIdentifier('Response'),
          ),
        ]),
      ),
      ts.factory.createStringLiteral('../models/Response'),
      undefined,
    );
  }

  #buildStatements(
    options: HttpClientOptions,
  ): [ts.Statement, ...ts.Statement[]] {
    return [
      this.#buildApiModelsImportDeclaration(),
      this.#buildAxiosHttpClientImportDeclaration(),
      this.#buildResponseModelImportDeclaration(),
      this.#endpointClientClassBuilder.build(options),
    ];
  }
}
